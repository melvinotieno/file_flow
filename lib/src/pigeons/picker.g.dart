// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

/// The base directory to start a picker from.
enum PickerDirectory {
  documents,
  downloads,
  images,
  video,
  audio,
}

/// The type of media to pick when using a media picker.
enum PickerMedia {
  image,
  video,
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is PickerDirectory) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is PickerMedia) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PickerDirectory.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PickerMedia.values[value];
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class PickerHostApi {
  /// Constructor for [PickerHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PickerHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Checks if the specified URI has been persisted.
  ///
  /// Parameters:
  /// - [uri]: The URI to check.
  ///
  /// Returns `true` if the URI has been persisted, `false` otherwise.
  Future<bool> persisted(Object uri) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.file_flow.PickerHostApi.persisted$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[uri]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  /// Allows the user to select a directory from the file system.
  ///
  /// Parameters:
  /// - [directory]: The base directory to start the picker from.
  /// - [exact]: Allow the exact directory or any subdirectory to be picked.
  /// - [persist]: Whether the selected directory should be persisted.
  ///
  /// Returns the URI of the selected directory as a [String].
  Future<String> pickDirectory([Object? directory, Object exact = false, bool persist = false,]) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.file_flow.PickerHostApi.pickDirectory$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[directory, exact, persist]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  /// Allows the user to select a file from the file system.
  ///
  /// Parameters:
  /// - [directory]: The base directory to start the picker from.
  /// - [mimeTypes]: A list of file mime types to filter the picker by.
  /// - [exact]: File must be within the base directory given.
  /// - [persist]: Whether the selected file should be persisted.
  ///
  /// Returns the URI of the selected file as a [String].
  Future<String> pickFile([Object? directory, List<String>? mimeTypes, bool exact = false, bool persist = false,]) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.file_flow.PickerHostApi.pickFile$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[directory, mimeTypes, exact, persist]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  /// Allows the user to select multiple files from the file system.
  ///
  /// Parameters:
  /// - [directory]: The base directory to start the picker from.
  /// - [mimeTypes]: A list of file mime types to filter the picker by.
  /// - [exact]: Files must be within the base directory given.
  /// - [persist]: Whether the selected files should be persisted.
  ///
  /// Returns the URIs of the selected files as a [List] of [String]s.
  Future<List<String>> pickFiles([Object? directory, List<String>? mimeTypes, bool exact = false, bool persist = false,]) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.file_flow.PickerHostApi.pickFiles$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[directory, mimeTypes, exact, persist]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<String>();
    }
  }

  /// Allows the user to select a media file (image or video) from the file
  /// system. By default, an image is picked.
  ///
  /// Parameters:
  /// - [media]: The type of media to pick.
  /// - [persist]: Whether the selected media file should be persisted.
  ///
  /// Returns the URI of the selected media file as a [String].
  Future<String> pickMediaFile([PickerMedia media = PickerMedia.image, bool persist = false]) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.file_flow.PickerHostApi.pickMediaFile$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[media, persist]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  /// Allows the user to select multiple media files (images or videos) from the
  /// file system. By default, images are picked.
  ///
  /// Parameters:
  /// - [media]: The type of media to pick.
  /// - [persist]: Whether the selected media files should be persisted.
  ///
  /// Returns the URIs of the selected media files as a [List] of [String]s.
  Future<List<String>> pickMediaFiles([PickerMedia media = PickerMedia.image, bool persist = false]) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.file_flow.PickerHostApi.pickMediaFiles$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[media, persist]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<String>();
    }
  }
}
