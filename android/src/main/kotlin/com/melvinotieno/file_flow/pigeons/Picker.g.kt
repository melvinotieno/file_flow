// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.melvinotieno.file_flow.pigeons

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is PickerFlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class PickerFlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** The base directory to start a picker from. */
enum class PickerDirectory(val raw: Int) {
  DOCUMENTS(0),
  DOWNLOADS(1),
  IMAGES(2),
  VIDEO(3),
  AUDIO(4);

  companion object {
    fun ofRaw(raw: Int): PickerDirectory? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** The type of media to pick when using a media picker. */
enum class PickerMedia(val raw: Int) {
  IMAGE(0),
  VIDEO(1);

  companion object {
    fun ofRaw(raw: Int): PickerMedia? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}
private open class PickerPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PickerDirectory.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PickerMedia.ofRaw(it.toInt())
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PickerDirectory -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is PickerMedia -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface PickerHostApi {
  /**
   * Checks if the specified URI has been persisted.
   *
   * Parameters:
   * - [uri]: The URI to check.
   *
   * Returns `true` if the URI has been persisted, `false` otherwise.
   */
  fun persisted(uri: Any): Boolean
  /**
   * Allows the user to select a directory from the file system.
   *
   * Parameters:
   * - [directory]: The base directory to start the picker from.
   * - [exact]: Allow the exact directory or any subdirectory to be picked.
   * - [persist]: Whether the selected directory should be persisted.
   *
   * Returns the URI of the selected directory as a [String].
   */
  fun pickDirectory(directory: Any?, exact: Any, persist: Boolean, callback: (Result<String>) -> Unit)
  /**
   * Allows the user to select a file from the file system.
   *
   * Parameters:
   * - [directory]: The base directory to start the picker from.
   * - [mimeTypes]: A list of file mime types to filter the picker by.
   * - [exact]: File must be within the base directory given.
   * - [persist]: Whether the selected file should be persisted.
   *
   * Returns the URI of the selected file as a [String].
   */
  fun pickFile(directory: Any?, mimeTypes: List<String>?, exact: Boolean, persist: Boolean, callback: (Result<String>) -> Unit)
  /**
   * Allows the user to select multiple files from the file system.
   *
   * Parameters:
   * - [directory]: The base directory to start the picker from.
   * - [mimeTypes]: A list of file mime types to filter the picker by.
   * - [exact]: Files must be within the base directory given.
   * - [persist]: Whether the selected files should be persisted.
   *
   * Returns the URIs of the selected files as a [List] of [String]s.
   */
  fun pickFiles(directory: Any?, mimeTypes: List<String>?, exact: Boolean, persist: Boolean, callback: (Result<List<String>>) -> Unit)
  /**
   * Allows the user to select a media file (image or video) from the file
   * system. By default, an image is picked.
   *
   * Parameters:
   * - [media]: The type of media to pick.
   * - [persist]: Whether the selected media file should be persisted.
   *
   * Returns the URI of the selected media file as a [String].
   */
  fun pickMediaFile(media: PickerMedia, persist: Boolean, callback: (Result<String>) -> Unit)
  /**
   * Allows the user to select multiple media files (images or videos) from the
   * file system. By default, images are picked.
   *
   * Parameters:
   * - [media]: The type of media to pick.
   * - [persist]: Whether the selected media files should be persisted.
   *
   * Returns the URIs of the selected media files as a [List] of [String]s.
   */
  fun pickMediaFiles(media: PickerMedia, persist: Boolean, callback: (Result<List<String>>) -> Unit)

  companion object {
    /** The codec used by PickerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      PickerPigeonCodec()
    }
    /** Sets up an instance of `PickerHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: PickerHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.file_flow.PickerHostApi.persisted$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val uriArg = args[0] as Any
            val wrapped: List<Any?> = try {
              listOf(api.persisted(uriArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.file_flow.PickerHostApi.pickDirectory$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val directoryArg = args[0]
            val exactArg = args[1] as Any
            val persistArg = args[2] as Boolean
            api.pickDirectory(directoryArg, exactArg, persistArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.file_flow.PickerHostApi.pickFile$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val directoryArg = args[0]
            val mimeTypesArg = args[1] as List<String>?
            val exactArg = args[2] as Boolean
            val persistArg = args[3] as Boolean
            api.pickFile(directoryArg, mimeTypesArg, exactArg, persistArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.file_flow.PickerHostApi.pickFiles$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val directoryArg = args[0]
            val mimeTypesArg = args[1] as List<String>?
            val exactArg = args[2] as Boolean
            val persistArg = args[3] as Boolean
            api.pickFiles(directoryArg, mimeTypesArg, exactArg, persistArg) { result: Result<List<String>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.file_flow.PickerHostApi.pickMediaFile$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val mediaArg = args[0] as PickerMedia
            val persistArg = args[1] as Boolean
            api.pickMediaFile(mediaArg, persistArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.file_flow.PickerHostApi.pickMediaFiles$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val mediaArg = args[0] as PickerMedia
            val persistArg = args[1] as Boolean
            api.pickMediaFiles(mediaArg, persistArg) { result: Result<List<String>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
